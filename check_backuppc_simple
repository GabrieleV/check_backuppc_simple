#!/usr/bin/perl
#
# check_backuppc_simple: a Nagios plugin to check the status of BackupPC
#
# Tested against BackupPC 3.2.1 , NRPE 2.13 and Nagios 
#   <http://backuppc.sourceforge.net>
#   <http://nagios.org>
#
# AUTHORS
#	Gabriele Vivinetto <gabriele.mailing@rvmgroup.it>
#
# CREDITS
#   Seneca Cunningham  <tetragon@users.sourceforge.net>
#
# COPYRIGHT
#   Copyright (C) 2015,2016       Gabriele Vivinetto
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use strict;
no utf8;

# Nagios
use lib "/usr/lib/nagios/plugins";
use Nagios::Plugin qw(%ERRORS %STATUS_TEXT);
use POSIX qw(strftime difftime);
use Getopt::Long;
Getopt::Long::Configure('bundling');

# BackupPC
use lib "/usr/share/backuppc/lib";
use BackupPC::Lib;

my $version = '1.1.1';
my $warnLevel = 1;
my $critLevel = 2;
my $warnLevelOld = 25;
my $critLevelOld = 49;
my $verbose = 0;
my $opt_V = 0;
my $opt_h = 0;
my $goodOpt = 0;
my $reduce = 0;
my $backupOnly = 0;
my $archiveOnly = 0;
my $statusOnly = 0;
my @hostsDesired;
my @hostsExcluded;
my $errorString="";
my $exitStatus=$ERRORS{'UNKNOWN'};

# Process options
$goodOpt = GetOptions(
	'v+' 	=> \$verbose, 'verbose+' => \$verbose, 
	'c=f' 	=> \$critLevel, 'critical=f' => \$critLevel,
	'w=f' 	=> \$warnLevel, 'warning=f' => \$warnLevel,
	'C=f' 	=> \$critLevelOld, 'critical=f' => \$critLevelOld,
	'W=f'	=> \$warnLevelOld, 'warning=f' => \$warnLevelOld,
	'V'		=> \$opt_V, 'version' => \$opt_V,
	'h'		=> \$opt_h, 'help' => \$opt_h,
	'r=i'	=> \$reduce, 'reduce' => \$reduce,
	'b'		=> \$backupOnly, 'backup-only' => \$backupOnly,
	'a'		=> \$archiveOnly, 'archive-only' => \$archiveOnly,
	's'		=> \$statusOnly, 'status-only' => \$statusOnly,
	'H=s' 	=> \@hostsDesired, 'hostname=s' => \@hostsDesired,
	'x=s' 	=> \@hostsExcluded, 'exclude=s' => \@hostsExcluded);

@hostsDesired = () if $#hostsDesired < 0;
@hostsExcluded = () if $#hostsExcluded < 0;

if ($opt_V) {
	print "check_backuppc_simple - " . $version . "\n";
	exit $ERRORS{'OK'};
}

if ($backupOnly and $archiveOnly) {
	$goodOpt = 0;
	print "Cannot apply both --backup-only and --archive-only, contradictory\n\n";
}

if ($opt_h or not $goodOpt) {
	print "check_backuppc_simple - " . $version . "\n";
	print "A Nagios plugin to check on BackupPC backup status.\n\n";
	print "Options:\n";
	print "  --hostname,-H      only check the specified host\n";
	print "  --exclude,-x       do not check the specified host\n";
	print "  --archive-only,-a  only check the archive hosts\n";
	print "  --backup-only,-b   only check the backup hosts\n";
	print "  --status-only,-s   only check backup status, omit connection failures that are\n";
	print "                     less than \$Conf{FullPeriod} old\n";
	print "  --warning,-w       number of failed hosts to be warning\n";
	print "  --critical,-c      number of failed hosts to be critical\n";
	print "  --warning-old,-W   hours old a succesfull backup be to be warning\n";
	print "  --critical-old,-C  hours old a succesfull backup be to be critical\n";
	print "  --reduce,-r        maximum number of failed hosts for severity reduction\n";
	print "  --verbose,-v       increase verbosity\n";
	print "  --version,-V       display plugin version\n";
	print "  --help,-h          display this message\n\n";
	exit $ERRORS{'OK'} if $goodOpt;
	exit $ERRORS{'UNKNOWN'};
}

if ($warnLevel > $critLevel) {
	print("BACKUPPC UNKNOWN - Warning threshold must be <= critical\n");
	exit $ERRORS{'UNKNOWN'};
}

if ($warnLevelOld > $critLevelOld) {
	print("BACKUPPC UNKNOWN - Warning threshold must be <= critical\n");
	exit $ERRORS{'UNKNOWN'};
}

# Connect to BackupPC
my $server;

if (!($server = BackupPC::Lib->new)) {
	print "BACKUPPC CRITICAL - Couldn't connect to BackupPC\n";
	exit $ERRORS{'CRITICAL'};
}

my %Conf = $server->Conf();

$server->ChildInit();

my $err = $server->ServerConnect($Conf{ServerHost}, $Conf{ServerPort});

if ($err) {
	print("BACKUPPC UNKNOWN - Can't connect to server ($err)\n");
	exit $ERRORS{'UNKNOWN'};
}

# hashes that BackupPC uses for varios status info
my %Status;
my %Jobs;
my %Info;

# query the BackupPC server for host, job, and server info
my $info_raw = $server->ServerMesg('status info');
my $jobs_raw = $server->ServerMesg('status jobs');
my $status_raw = $server->ServerMesg('status hosts');

# undump the output... BackupPC uses Data::Dumper
eval $info_raw;
eval $jobs_raw;
eval $status_raw;

# check the dumped output
my $hostCount = 0;
my @goodHost;
my @badHost;
my @tooOld;
my @tooMuchOld;

foreach my $host (@hostsDesired, @hostsExcluded) {
	if (not grep {/$host/} keys(%Status)) 	{
		print("BACKUPPC UNKNOWN - Host ($host) is not present in BackupPc\n");
		exit $ERRORS{'UNKNOWN'};
	}
}

# host status checks
foreach my $host (sort(keys(%Status))) {
	next if $host =~ /^ /;
	next if (@hostsDesired and not grep {/$host/} @hostsDesired);
	next if (@hostsExcluded and grep {/$host/} @hostsExcluded);
	next if ($backupOnly and $Status{$host}{'type'} eq 'archive');
	next if ($archiveOnly and $Status{$host}{'type'} ne 'archive');

	my $lastGoodBackupTime = $Status{$host}{'lastGoodBackupTime'} + 1;
	my $now = time();
	my $hoursAgo = ($now - $lastGoodBackupTime) /60/60 ;
	$hoursAgo = sprintf("%.1f", $hoursAgo);
	my $lastGoodBackupDate = strftime("%Y-%m-%d %H:%M:%S", localtime($lastGoodBackupTime));
	my $StatusHostError=$Status{$host}{'error'};
	$hostCount++;

	# Debug
	if ($verbose > 0) {
		print "Host $host state " . $Status{$host}{'state'};
		print " Errors: " . $StatusHostError . "\n";
		print " Last Good Backup was done on $lastGoodBackupDate\n" ;
		print " Last Good Backup was done $hoursAgo hours ago\n";
	}

	if ( $StatusHostError ne "" ) 	{
		push @badHost, $host;
		if ( $verbose > 0 ) {
			print " badHost $host\n\n";
		}
		$errorString=$errorString . "($host) $StatusHostError "; 
	}
	
	if ($hoursAgo > $warnLevelOld) {
		if ($hoursAgo > $critLevelOld) {
			push @tooMuchOld, $host;
			if ( $verbose > 0 ) {
				print " tooMuchOld $host\n\n";
			}
			$errorString=$errorString . "($host) Last Good Backup was done $hoursAgo hours ago "; 
		}
		else {
			push @tooOld, $host;
			if ( $verbose > 0 ) {
				print " tooOld $host\n\n";
			}
			$errorString=$errorString . "($host) Last Good Backup was done $hoursAgo hours ago "; 
		}
	}

	if ( $StatusHostError eq "" and $hoursAgo <= $warnLevelOld and $hoursAgo <= $critLevelOld ) {
		push @goodHost, $host;
		if ( $verbose > 0 ) {
			print " goodHost, $host\n\n";
		}
	}
}

if ($hostCount == $#goodHost+1 and $#tooOld==-1 and $#tooMuchOld==-1) {
	print "BACKUPPC OK - (" . @badHost . "/" . $hostCount . ") failures\n";
	exit $ERRORS{'OK'};
}

# Debug
if ($verbose > 0) {
	print "hostCount=" . ($hostCount ) . "\n";
	print "goodHost=" . ($#goodHost + 1) . "\n";
	print "tooOld=" . ($#tooOld + 1) . "\n";
	print "tooMuchOld=" . ($#tooMuchOld + 1) . "\n";
	print "badHost=" . ($#badHost + 1) . "\n";
}

# Only failures reach this far

# Backups are too old ?
if ($#tooOld > -1) {
	$errorString="( " . ($#tooOld + 1)  . "/" . $hostCount . " ) backups are too old " . $errorString; 
	if ( $exitStatus != $ERRORS{'CRITICAL'} )  {
		$exitStatus = $ERRORS{'WARNING'};
	}
}

if ( $#tooMuchOld > -1) {
	$errorString="( " . ($#tooMuchOld + 1)  . "/" . $hostCount . " ) backups are too much old " . $errorString; 
	$exitStatus=$ERRORS{'CRITICAL'};
}


# Are there erros ?
if ( ($#badHost+1) >= $critLevel ) {
	$errorString="( " . ($#badHost + 1)  . "/" . $hostCount . " ) hosts  have failures " . $errorString;
	$exitStatus=$ERRORS{'CRITICAL'};
}
elsif ( ($#badHost + 1) >= $warnLevel ) {
	$errorString="( " . ($#badHost + 1)  . "/" . $hostCount . " ) hosts have failures " . $errorString;
	if ( $exitStatus != $ERRORS{'CRITICAL'} )  {
		$exitStatus = $ERRORS{'WARNING'};
	}
}


print "BACKUPPC $STATUS_TEXT{$exitStatus} - $errorString\n";
exit $exitStatus;
